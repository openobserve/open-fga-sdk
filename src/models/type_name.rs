/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeName {
    #[serde(rename = "TYPE_NAME_UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "TYPE_NAME_ANY")]
    Any,
    #[serde(rename = "TYPE_NAME_BOOL")]
    Bool,
    #[serde(rename = "TYPE_NAME_STRING")]
    String,
    #[serde(rename = "TYPE_NAME_INT")]
    Int,
    #[serde(rename = "TYPE_NAME_UINT")]
    Uint,
    #[serde(rename = "TYPE_NAME_DOUBLE")]
    Double,
    #[serde(rename = "TYPE_NAME_DURATION")]
    Duration,
    #[serde(rename = "TYPE_NAME_TIMESTAMP")]
    Timestamp,
    #[serde(rename = "TYPE_NAME_MAP")]
    Map,
    #[serde(rename = "TYPE_NAME_LIST")]
    List,
    #[serde(rename = "TYPE_NAME_IPADDRESS")]
    Ipaddress,

}

impl ToString for TypeName {
    fn to_string(&self) -> String {
        match self {
            Self::Unspecified => String::from("TYPE_NAME_UNSPECIFIED"),
            Self::Any => String::from("TYPE_NAME_ANY"),
            Self::Bool => String::from("TYPE_NAME_BOOL"),
            Self::String => String::from("TYPE_NAME_STRING"),
            Self::Int => String::from("TYPE_NAME_INT"),
            Self::Uint => String::from("TYPE_NAME_UINT"),
            Self::Double => String::from("TYPE_NAME_DOUBLE"),
            Self::Duration => String::from("TYPE_NAME_DURATION"),
            Self::Timestamp => String::from("TYPE_NAME_TIMESTAMP"),
            Self::Map => String::from("TYPE_NAME_MAP"),
            Self::List => String::from("TYPE_NAME_LIST"),
            Self::Ipaddress => String::from("TYPE_NAME_IPADDRESS"),
        }
    }
}

impl Default for TypeName {
    fn default() -> TypeName {
        Self::Unspecified
    }
}




